#!k
` 0:"ngn/k, (c) 2019-2021 ngn, GNU AGPLv3 - https://git.sr.ht/~ngn/k/blob/master/LICENSE";
help:""!()
help["+"]:("verbs   :+-*%!&|"
 "c char   i int   n number(int|float)   s symbol   a atom   d dict   L list"
 "x y z any   f monadic function   F dyadic function   v variable name"
 ""
 " :x RETURN    {:x+1;2}[3] -> 4"
 "v:y SET       a:1;a -> 1   (b;(c;d)):(2 3;4 5);c -> 4"
 "(:) right     f:(:);f[1;2] -> 2"
 "N+N add       1 2+3 -> 4 5"
 " +x transpose +(\"ab\";\"cd\") -> (\"ac\";\"bd\")"
 "N-N subtract  1-2 3 -> -1 -2"
 " -N negate    - 1 2 -> -1 -2"
 "N*N multiply  1 2*3 4 -> 3 8"
 " *x first     *(0 1;\"cd\") -> 0 1"
 "N%N divide    4 3%2 -> 2 1   4 3%2.0 -> 2.0 1.5"
 " %N sqrt      %25 -> 5.0   %-1 -> 0n"
 "i!I mod       10!1234 567 -> 4 7"
 "i!I div       -10!1234 567 -> 123 56"
 "x!y dict      `a`b!1 2 -> `a`b!1 2"
 " !i enum      !3 -> 0 1 2   !-3 -> -3 -2 -1"
 " !I odometer  !2 3 -> (0 0 0 1 1 1;0 1 2 0 1 2)"
 " !d keys      !`a`b!0 1 -> `a`b"
 "N&N min       2&-1 3 -> -1 2"
 "N&N and       0 0 1 1&0 1 0 1 -> 0 0 0 1"
 " &I where     &3 -> 0 0 0   &1 0 1 4 2 -> 0 2 3 3 3 3 4 4"
 " &x deepwhere &(0 1 0;1 0 0;1 1 1) -> (0 1 2 2 2;1 0 0 1 2)"
 "N|N max       2|-1 3 -> 2 3"
 "N|N or        0 0 1 1|0 1 0 1 -> 0 1 1 1"
 " |x reverse   |\"abc\" -> \"cba\"   |12 -> 12"
 "N<N less      0 2<1 -> 1 0"
 " <X asc       <\"abacus\" -> 0 2 1 3 5 4"
 " <x open      fd:<`:/path/to/file.txt"
 "N>N more      0 1>0 2 -> 0 0"
 " >i close     >fd"
 "N=N equal     0 1 2=0 1 3 -> 1 1 0"
 " =X group     =\"abracadabra\" -> \"abrcd\"!(0 3 5 7 10;1 8;2 9;,4;,6)"
 " =i unitmat   =3 -> (1 0 0;0 1 0;0 0 1)"
 "x~y match     2 3~2 3 -> 1   \"4\"~4 -> 0   0~0.0 -> 0"
 " ~x not       ~(0 2;``a;\"a \\0\";::;{}) -> (1 0;1 0;0 0 1;1;0)"
 "x,y concat    0,1 2 -> 0 1 2  \"a\",1 -> (\"a\";1)"
 " ,x enlist    ,0 -> ,0   ,0 1 -> ,0 1   ,`a!1 -> +(,`a)!,,1"
 "X^y without   \"abracadabra\"^\"bc\" -> \"araadara\""
 "a^y fill      1^0 0N 2 3 0N -> 0 1 2 3 1   \"b\"^\" \" -> \"b\""
 " ^x null      ^(\" a\";0 1 0N;``a;0.0 0n) -> (1 0;0 0 1;1 0;0 1)"
 "i#y reshape   3#2 -> 2 2 2"
 "I#y reshape   2 3#` -> (```;```)"
 "f#y filter    {x>1}#0 2 1 3 5 4 -> 2 3 5 4"
 " #x length    #\"abc\" -> 3   #4 -> 1   #`a`b`c!0 1 0 -> 3"
 "x_y drop      2_\"abcde\" -> \"cde\"   `b_`a`b`c!0 1 2 -> `a`c!0 2"
 "x_i remove    \"abcde\"_2 -> \"abde\""
 " _x floor     _12.34 -12.34 -> 12 -13"
 " _x lowercase _\"Ab\" -> \"ab\""
 "x$y cast      `c$97 -> \"a\"   `d$1 -> 1.0   `$\"a\" -> `a"
 " $x string    $(12;\"ab\";`cd;+) -> (\"12\";(,\"a\";,\"b\");\"cd\";,\"+\")"
 "X?y find      \"abcde\"?\"bfe\" -> 1 0N 4"
 "x?y random    3?1000 -> 11 398 293   1?0 -> ,-8164324247243690787"
 "x?y deal      -3?1000 -> 11 398 293 /guaranteed distinct"
 " ?x uniq      ?\"abacus\" -> \"abcus\""
 "x@y apply(1)  {x+1}@2 -> 3   \"abc\"@1 -> \"b\"   (`a`b!0 1)@`b -> 1"
 " @x type      @1 -> `b   @\"ab\" -> `C   @() -> `A   @(@) -> `v"
 "x.L apply(n)  {x*y+1}. 2 3 -> 8   (`a`b`c;`d`e`f). 1 0 -> `d"
 " .C eval      .\"1+2\" -> 3"
 " .d values    .`a`b!0 1 -> 0 1"
 ""
 "@[x;y;z]   amend @[\"ABC\";1;_:] -> \"AbC\"   @[2 3;1;{-x}] -> 2 -3"
 "@[x;y;z;u] amend @[\"abc\";1;:;\"d\"] -> \"adc\"   @[2 3;0;+;4] -> 6 3"
 ".[x;y;z;u] drill .[(\"ab\";\"cd\");1 0;:;\"x\"] -> (\"ab\";\"xd\")"
 ".[x;y;z]   try   .[+;1 2;{x}] -> 3   .[+;1,`;{x}] -> \"typ\""
 ""
 "  0:x read  lines"
 "x 0:y write lines"
 "  1:x read  bytes"
 "x 1:y write bytes"
 ""
 "$[x;y;z] COND /if x then y else z")
help["'"]:("adverbs   ' / \\ ': /: \\:"
 "  f'x  each1     #'(\"abc\";3 4 5 6) -> 3 4"
 "x F'y  each2     #'(\"abc\";3 4 5 6) -> 3 4"
 "  i'x  slide     3'\"abcdef\" -> (\"abc\";\"bcd\";\"cde\";\"def\")"
 "  X'x  bin       1 3 5 7 9':8 9 0 -> 3 4 -1"
 "  F/x  fold      +/1 2 3 -> 6"
 "x F/y  seeded /  10+/1 2 3 -> 16"
 "  F\\x  scan      +\\1 2 3 -> 1 3 6"
 "y F\\x  seeded \\  10+\\1 2 3 -> 11 13 16"
 "  C/x  join      \"ra\"/(\"ab\";\"cadab\";\"\") -> \"abracadabra\""
 "  C\\C  split     \"ra\"\\\"abracadabra\" -> (\"ab\";\"cadab\";\"\")"
 "  I/I  decode    24 60 60/1 2 3 -> 3723   2/1 1 0 1 -> 13"
 "  I\\I  encode    24 60 60\\3723 -> 1 2 3   2\\13 -> 1 1 0 1"
 "  F':x eachprior -':12 13 11 17 14 -> 12 1 -2 6 -3"
 "x F':y seeded ': 10-':12 13 11 17 14 -> 2 1 -2 6 -3"
 "x F/:y eachright 1 2*/:3 4 -> (3 6;4 8)"
 "x F\\:y eachleft  1 2*\\:3 4 -> (3 4;6 8)")
help["`"]:("`symbol? and `symbol@"
 "   `@x serialize     ` 7 8 9 -> 0x020300000000000000070809"
 "   `?C deserialize   `?0x020300000000000000070809 -> 7 8 9"
 "  `k@x pretty-print  `k 7 8 9 -> \"7 8 9\""
 "  `p@C parse"
 " `cf@x const-fold"
 "  `t[] time(millis)"
 "  `x@x fork          `x((\"/bin/wc\";\"-l\");\"a\\nbc\\nd\\n\") -> \"3\\n\""
 "`hex@C hex           `hex\"ab\" -> \"6162\""
 "  `j?C parse json    `j?\"{\\\"a\\\":1,\\\"b\\\":[true,\\\"c\\\"]}\" -> `a`b!(1.0;(1;,\"c\"))"
 "`sin@N trigonometry  `sin 12.34 -> 0.22444212919135995"
 "`md5@C `sha1@x `sha256@x `sha3@x `aes  crypto"
 "  `e[] print error")
help[" "]:("ngn/k"
 "\\            help"
 "\\+            verbs"
 "\\'            adverbs"
 "\\`            `symbol? and `symbol@"
 ""
 "\\command"
 "/comment"
 ""
 "\\\\          exit"
 "\\t:n expr    time"
 "\\l file.k    load"
 "\\w           workspace"
 "expr \\expr   log")
repl.fmt:{$[x~(::);"";(`A~@x)&1<#x;"(",("\n "/`k'x),")\n";`k[x],"\n"]}
repl.rep:{` 1:," ";$[#x:1:0;;:0];x:-1_x
          $[(3>#x)&("\\"=*x)&~^(!help)?x 1;:#` 0:help x 1;]
          .[{` 1:repl.fmt[. x]};,x;`e@];1}
{x}repl.rep/1;
\\
